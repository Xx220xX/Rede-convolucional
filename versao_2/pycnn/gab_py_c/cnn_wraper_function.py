from cnn_wrapper_structs import *
clib.createCnn.argtypes = [c.c_void_p,Params,c.c_uint32,c.c_uint32,c.c_uint32]
clib.createCnn.restype = c.c_void_p
clib.releaseCnn.argtypes = [c.c_void_p]
clib.releaseCnn.restype = None
clib.CnnRemoveLastLayer.argtypes = [c.c_void_p]
clib.CnnRemoveLastLayer.restype = None
clib.createCnnWithWrapperFile.argtypes = [c.c_void_p,Params,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint64]
clib.createCnnWithWrapperFile.restype = c.c_void_p
clib.createCnnWithWrapperProgram.argtypes = [c.c_void_p,Params,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint64]
clib.createCnnWithWrapperProgram.restype = c.c_void_p
clib.CnnCalculeError.argtypes = [c.c_void_p]
clib.CnnCalculeError.restype = c.c_int
clib.CnnCalculeErrorWithOutput.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnCalculeErrorWithOutput.restype = c.c_int
clib.CnnGetIndexMax.argtypes = [c.c_void_p]
clib.CnnGetIndexMax.restype = c.c_int
clib.Convolucao.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32]
clib.Convolucao.restype = c.c_int
clib.ConvolucaoNcausal.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32]
clib.ConvolucaoNcausal.restype = c.c_int
clib.Pooling.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32]
clib.Pooling.restype = c.c_int
clib.PoolingAv.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32]
clib.PoolingAv.restype = c.c_int
clib.Relu.argtypes = [c.c_void_p,c.c_char]
clib.Relu.restype = c.c_int
clib.Padding.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32]
clib.Padding.restype = c.c_int
clib.BatchNorm	.argtypes = [c.c_void_p,c.c_char,c.c_double]
clib.BatchNorm.restype = c.c_int
clib.SoftMax.argtypes = [c.c_void_p,c.c_char]
clib.SoftMax.restype = c.c_int
clib.Dropout.argtypes = [c.c_void_p,c.c_char,c.c_double,c.c_int64]
clib.Dropout.restype = c.c_int
clib.FullConnect.argtypes = [c.c_void_p,c.c_char,c.c_uint32,c.c_int]
clib.FullConnect.restype = c.c_int
clib.CnnCall.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnCall.restype = c.c_int
clib.CnnLearn.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnLearn.restype = c.c_int
clib.CnnInitLuaVm.argtypes = [c.c_void_p]
clib.CnnInitLuaVm.restype = None
clib.CnnLuaConsole.argtypes = [c.c_void_p]
clib.CnnLuaConsole.restype = c.c_int
clib.LuaputHelpFunctionArgs.argtypes = [c.c_void_p]
clib.LuaputHelpFunctionArgs.restype = None
clib.CnnLuaLoadFile.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnLuaLoadFile.restype = c.c_int
clib.cnnSave.argtypes = [c.c_void_p,c.c_void_p]
clib.cnnSave.restype = None
clib.cnnCarregar.argtypes = [c.c_void_p,c.c_void_p]
clib.cnnCarregar.restype = c.c_int
clib.normalizeGPU.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_int,c.c_double,c.c_double]
clib.normalizeGPU.restype = None
clib.normalizeGPUSpaceKnow.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_int,c.c_double,c.c_double,c.c_double,c.c_double]
clib.normalizeGPUSpaceKnow.restype = None
clib.printCnn.argtypes = [c.c_void_p]
clib.printCnn.restype = None
clib.salveCnnOutAsPPMGPU.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.salveCnnOutAsPPMGPU.restype = c.c_void_p
clib.getVersion.argtypes = []
clib.getVersion.restype = c.c_void_p
clib.getInfo.argtypes = []
clib.getInfo.restype = c.c_void_p
clib.createCnnPy.argtypes = [c.c_void_p,c.c_double,c.c_double,c.c_double,c.c_uint32,c.c_uint32,c.c_uint32]
clib.createCnnPy.restype = None
clib.releaseCnnWrapper.argtypes = [c.c_void_p]
clib.releaseCnnWrapper.restype = None
clib.CnnSaveInFile.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnSaveInFile.restype = c.c_int
clib.camadaToString.argtypes = [c.c_void_p]
clib.camadaToString.restype = c.c_void_p
clib.CnnLoadByFile.argtypes = [c.c_void_p,c.c_void_p]
clib.CnnLoadByFile.restype = c.c_int
clib.openFILE.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.openFILE.restype = c.c_int
clib.closeFile.argtypes = [c.c_void_p]
clib.closeFile.restype = c.c_int
clib.initRandom.argtypes = [c.c_int64]
clib.initRandom.restype = None
clib.Py_getCnnOutPutAsPPM.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_void_p]
clib.Py_getCnnOutPutAsPPM.restype = None
clib.freeP.argtypes = [c.c_void_p]
clib.freeP.restype = None
clib.new_Tensor.argtypes = [c.c_void_p,c.c_void_p,c.c_char,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_void_p,c.c_void_p]
clib.new_Tensor.restype = c.c_void_p
clib.printTensor.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.printTensor.restype = None
clib.TensorFill.argtypes = [c.c_void_p,c.c_void_p,c.c_char]
clib.TensorFill.restype = c.c_int
clib.TensorFillOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_char,c.c_uint64]
clib.TensorFillOffSet.restype = c.c_int
clib.TensorFillDouble.argtypes = [c.c_void_p,c.c_void_p,c.c_double]
clib.TensorFillDouble.restype = c.c_int
clib.TensorFillDoubleOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_double,c.c_uint64]
clib.TensorFillDoubleOffSet.restype = c.c_int
clib.TensorPutValues.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.TensorPutValues.restype = c.c_int
clib.TensorPutValuesOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64]
clib.TensorPutValuesOffSet.restype = c.c_int
clib.TensorGetValues.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.TensorGetValues.restype = c.c_int
clib.TensorGetValuesOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64]
clib.TensorGetValuesOffSet.restype = c.c_int
clib.TensorGetValuesMem.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64]
clib.TensorGetValuesMem.restype = c.c_int
clib.TensorGetValuesMemOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64,c.c_uint64]
clib.TensorGetValuesMemOffSet.restype = c.c_int
clib.TensorPutValuesMem.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64]
clib.TensorPutValuesMem.restype = c.c_int
clib.TensorPutValuesMemOffSet.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p,c.c_uint64,c.c_uint64]
clib.TensorPutValuesMemOffSet.restype = c.c_int
clib.TensorGetNorm.argtypes = [c.c_void_p,c.c_void_p,c.c_void_p]
clib.TensorGetNorm.restype = c.c_int
clib.TensorAt.argtypes = [c.c_void_p,c.c_uint32,c.c_uint32,c.c_uint32,c.c_uint32,c.c_void_p]
clib.TensorAt.restype = c.c_int
clib.releaseTensor.argtypes = [c.c_void_p]
clib.releaseTensor.restype = None
clib.dividirVetor.argtypes = [c.c_void_p,c.c_void_p,c.c_uint64,c.c_double,c.c_void_p,c.c_uint64,c.c_void_p]
clib.dividirVetor.restype = c.c_int
