#ifndef KERNELS_H
#define KERNELS_H
const char default_kernel[] = 
/*1*/		"#ifndef GAB_KERNELS_OPENCL_H\n"
/*2*/		"#define GAB_KERNELS_OPENCL_H\n"
/*3*/		"//utils.h\n"
/*4*/		"// Created by Xx220xX on 10/05/2020.\n"
/*5*/		"\n"
/*6*/		"#define Vector __global double *\n"
/*7*/		"\n"
/*8*/		"#define kV __kernel void\n"
/*9*/		"\n"
/*10*/		"#define TensorMap(x, y, z, tx, ty)((z)*(ty*tx)+(x)*ty+(y))\n"
/*11*/		"\n"
/*12*/		"#define TensorMap4D(x, y, z, l, tx, ty, tz)((l)*(ty)*(tx)*(tz)+(z)*(ty*tx)+(x)*ty+(y))\n"
/*13*/		"\n"
/*14*/		"#define TensorRemap4D(total, _x_, _y_, _z_, _l_, tx, ty, tz)\\\n"
/*15*/		"_y_ = total%ty      ;                                        \\\n"
/*16*/		"_x_ = (total - _y_)%(ty*tx)/ty ;                             \\\n"
/*17*/		"_z_ = (total- _x_*ty - _y_)%(tx*ty*tz)/(ty*tx)  ;            \\\n"
/*18*/		"_l_ = (total -_z_*tx*ty -_x_*ty - _y_)/(tx*ty*tz);\n"
/*19*/		"\n"
/*20*/		"\n"
/*21*/		"#define TensorRemap(total, _x_, _y_, _z_, tx, ty)\\\n"
/*22*/		"_y_ = total % ty;\\\n"
/*23*/		"_x_ = ((total - _y_) % (ty * tx)) / ty;\\\n"
/*24*/		"_z_ = (k - _x_ * ty - _y_) / (tx * ty);\n"
/*25*/		"\n"
/*26*/		"#define TensorRemap2D(total, x, y, ty)\\\n"
/*27*/		"y = total % ty;\\\n"
/*28*/		"x = total/ ty;\n"
/*29*/		"\n"
/*30*/		"typedef struct {\n"
/*31*/		"	int x, y, z;\n"
/*32*/		"} Ponto3d;\n"
/*33*/		"\n"
/*34*/		"typedef struct {\n"
/*35*/		"	Ponto3d min, max;\n"
/*36*/		"} Range;\n"
/*37*/		"\n"
/*38*/		"kV createImg(__global unsigned char *out, Vector v, int vx, int vy, int imi, int imy, int k0) {\n"
/*39*/		"	int k = get_global_id(0) + k0;\n"
/*40*/		"	int i, j, z;\n"
/*41*/		"	TensorRemap(k, i, j, z, vx, vy)\n"
/*42*/		"	imi = imi + i;\n"
/*43*/		"	int imj = j + z * vy + z;\n"
/*44*/		"	out[imi * imy + imj] = ((int) v[k]) & 0xff;\n"
/*45*/		"}\n"
/*46*/		"\n"
/*47*/		"kV printTensor(Vector t, int mx, int my, int mz, int mw) {\n"
/*48*/		"	for (int w = 0; w < mw; w++) {\n"
/*49*/		"		for (int z = 0; z < mz; z++) {\n"
/*50*/		"			printf(\"[Dim(%d,%d)]\\n\",w, z);\n"
/*51*/		"			for (int x = 0; x < mx; x++) {\n"
/*52*/		"				for (int y = 0; y < my; y++) {\n"
/*53*/		"					printf(\"%.4lf \\t\", t[TensorMap4D(x, y, z,w, mx, my,mz) ]);\n"
/*54*/		"				}\n"
/*55*/		"				printf(\"\\n\");\n"
/*56*/		"			}\n"
/*57*/		"		}\n"
/*58*/		"		printf(\"\\n\");\n"
/*59*/		"	}\n"
/*60*/		"}\n"
/*61*/		"\n"
/*62*/		"\n"
/*63*/		"kV\n"
/*64*/		"normalizeVector(Vector input, Vector saida, double multiplicador, double somador, double subtrator,\n"
/*65*/		"				int k0) {\n"
/*66*/		"	int k = get_global_id(0) + k0;\n"
/*67*/		"	saida[k] = (input[k] + somador) * multiplicador - subtrator;\n"
/*68*/		"}\n"
/*69*/		"\n"
/*70*/		"\n"
/*71*/		"kV subKernel(Vector grad, Vector saida, Vector target, int k0) {\n"
/*72*/		"	int k = get_global_id(0) + k0;\n"
/*73*/		"	grad[k] = saida[k] - target[k];\n"
/*74*/		"}\n"
/*75*/		"\n"
/*76*/		"kV divKernel(Vector v, double value, int k0) {\n"
/*77*/		"	int k = get_global_id(0) + k0;\n"
/*78*/		"	v[k] = v[k] / value;\n"
/*79*/		"}\n"
/*80*/		"\n"
/*81*/		"kV divIntDo(__global unsigned char *src, Vector v, double value, int k0) {\n"
/*82*/		"	int k = get_global_id(0) + k0;\n"
/*83*/		"	v[k] = ((double) src[k]) / value;\n"
/*84*/		"}\n"
/*85*/		"\n"
/*86*/		"kV int2vector(__global unsigned char *ints, Vector v, int noptiobs, int k0) {\n"
/*87*/		"	int k = get_global_id(0) + k0;\n"
/*88*/		"	for (int j = 0; j < noptiobs; j++) {\n"
/*89*/		"		v[k * noptiobs + j] = (double) (j == ints[k]);\n"
/*90*/		"	}\n"
/*91*/		"}\n"
/*92*/		"\n"
/*93*/		"\n"
/*94*/		"\n"
/*95*/		"//bathnorm.h\n"
/*96*/		"\n"
/*97*/		"// achar a media\n"
/*98*/		"kV BatchNormMedia(Vector entrada, Vector media,\n"
/*99*/		"                  int entradatx, int entradaty, int k0) {\n"
/*100*/		"	int z = get_global_id(0) + k0;\n"
/*101*/		"	int x, y;\n"
/*102*/		"	double m = 0;\n"
/*103*/		"	for (x = 0; x < entradatx; x++) {\n"
/*104*/		"		for (y = 0; y < entradaty; y++) {\n"
/*105*/		"			m += entrada[TensorMap(x, y, z, entradatx, entradaty)];\n"
/*106*/		"		}\n"
/*107*/		"	}\n"
/*108*/		"	media[z] = m / (double) (entradatx * entradaty);\n"
/*109*/		"}\n"
/*110*/		"\n"
/*111*/		"// achar a diferenca\n"
/*112*/		"kV BatchNormDiferenca(Vector entrada, Vector media,\n"
/*113*/		"                      Vector diferenca,\n"
/*114*/		"                      Vector diferencaquad,\n"
/*115*/		"                      int entradatx, int entradaty, int k0) {\n"
/*116*/		"	int x, y, z;\n"
/*117*/		"	int k = get_global_id(0) + k0;\n"
/*118*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*119*/		"	diferenca[k] = entrada[k] - media[z];\n"
/*120*/		"	diferencaquad[k] = diferenca[k] * diferenca[k];\n"
/*121*/		"}\n"
/*122*/		"\n"
/*123*/		"kV BatchNormVariance(Vector dif, Vector difQuad,\n"
/*124*/		"                     Vector sumdiferenca, Vector variancia,\n"
/*125*/		"                     double episolon, int diftx, int difty,\n"
/*126*/		"                     int k0) {\n"
/*127*/		"	int z = get_global_id(0) + k0;\n"
/*128*/		"	double sum = 0;\n"
/*129*/		"	double sumdif = 0;\n"
/*130*/		"	for (int x = 0; x < diftx; x++) {\n"
/*131*/		"		for (int y = 0; y < difty; y++) {\n"
/*132*/		"			sum += difQuad[TensorMap(x, y, z, diftx, difty)];\n"
/*133*/		"			sumdif += dif[TensorMap(x, y, z, diftx, difty)];\n"
/*134*/		"		}\n"
/*135*/		"	}\n"
/*136*/		"	sumdiferenca[z] = sumdif;\n"
/*137*/		"	variancia[z] = sqrt(sum / (difty * diftx) + episolon);\n"
/*138*/		"}\n"
/*139*/		"\n"
/*140*/		"// normaliza\n"
/*141*/		"kV BatchNormNormaliza(Vector saida,\n"
/*142*/		"                      Vector norma,\n"
/*143*/		"                      Vector diferenca,\n"
/*144*/		"                      Vector variancia,\n"
/*145*/		"                      Vector Y,\n"
/*146*/		"                      Vector B,\n"
/*147*/		"                      int diferencatx, int diferencaty, int k0) {\n"
/*148*/		"	int x, y, z;\n"
/*149*/		"	int k = get_global_id(0) + k0;\n"
/*150*/		"	TensorRemap(k, x, y, z, diferencatx, diferencaty)\n"
/*151*/		"	norma[k] = diferenca[k] / variancia[z];\n"
/*152*/		"	saida[k] = norma[k] * Y[z] + B[z];\n"
/*153*/		"}\n"
/*154*/		"\n"
/*155*/		"\n"
/*156*/		"kV BatchNormaCalcGrad1(Vector gradIn,\n"
/*157*/		"                       Vector gradNext,\n"
/*158*/		"                       Vector variancia,\n"
/*159*/		"                       Vector media,\n"
/*160*/		"                       Vector Y,\n"
/*161*/		"\n"
/*162*/		"                       Vector somaDif,\n"
/*163*/		"                       Vector entrada,\n"
/*164*/		"                       int entradatx,\n"
/*165*/		"                       int entradaty,\n"
/*166*/		"                       int k0) {\n"
/*167*/		"	int x, y, z;\n"
/*168*/		"	int k = get_global_id(0) + k0;\n"
/*169*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*170*/		"	double M = entradatx * entradaty;\n"
/*171*/		"	double dif_variance = somaDif[z] - entrada[k] + media[z] + (entrada[k] - media[z]) * (M - 1);\n"
/*172*/		"	dif_variance = dif_variance * -1.0 / (variancia[z] * M * M);\n"
/*173*/		"\n"
/*174*/		"	double didx = variancia[z] * (M - 1 / M) + (media[z] - entrada[k]) * dif_variance;\n"
/*175*/		"	didx = didx / (variancia[z] * variancia[z]);\n"
/*176*/		"	didx = didx * gradNext[k];\n"
/*177*/		"	gradIn[k] = didx * Y[z];\n"
/*178*/		"}\n"
/*179*/		"\n"
/*180*/		"kV BatchNormaCalcGrad2(Vector gradNext,\n"
/*181*/		"                       Vector norma,\n"
/*182*/		"                       Vector gradY,\n"
/*183*/		"                       Vector gradB,\n"
/*184*/		"                       int entradatx,\n"
/*185*/		"                       int entradaty,\n"
/*186*/		"                       int k0) {\n"
/*187*/		"	int z = get_global_id(0) + k0;\n"
/*188*/		"	double sumY = 0;\n"
/*189*/		"	double sumB = 0;\n"
/*190*/		"	int k;\n"
/*191*/		"	for (int x = 0; x < entradatx; ++x) {\n"
/*192*/		"		for (int y = 0; y < entradaty; ++y) {\n"
/*193*/		"			k = TensorMap(x, y, z, entradatx, entradaty);\n"
/*194*/		"			sumY += gradNext[k];\n"
/*195*/		"			sumB += gradNext[k] * norma[k];\n"
/*196*/		"		}\n"
/*197*/		"	}\n"
/*198*/		"	gradB[z] = sumB;\n"
/*199*/		"	gradY[z] = sumY;\n"
/*200*/		"}\n"
/*201*/		"\n"
/*202*/		"\n"
/*203*/		"kV batchNormCorrigePeso(Vector gradY,\n"
/*204*/		"                        Vector gradB,\n"
/*205*/		"                        Vector Y,\n"
/*206*/		"                        Vector B,\n"
/*207*/		"                        double hitlearn,\n"
/*208*/		"                        int k0) {\n"
/*209*/		"	int z = get_global_id(0) + k0;\n"
/*210*/		"	B[z] = B[z] - gradB[z] * hitlearn;\n"
/*211*/		"	Y[z] = Y[z] - gradY[z] * hitlearn;\n"
/*212*/		"}\n"
/*213*/		"//conv.h\n"
/*214*/		"kV convSum(Vector filtro, Vector entrada, Vector saida,\n"
/*215*/		"		   int passox,int passoy,\n"
/*216*/		"		   int saidatx, int saidaty,\n"
/*217*/		"		   int entradatx, int entradaty,\n"
/*218*/		"		   int fx,int fy, int fz, int k0) {\n"
/*219*/		"	int k = get_global_id(0) + k0;\n"
/*220*/		"	int x, y, filtrok;\n"
/*221*/		"	TensorRemap(k, x, y, filtrok, saidatx, saidaty)\n"
/*222*/		"	double sum = 0, f, v;\n"
/*223*/		"	for (int m = 0; m < fx; m++)\n"
/*224*/		"		for (int n = 0; n < fy; n++)\n"
/*225*/		"			for (int z = 0; z < fz; z++) {\n"
/*226*/		"				f = filtro[TensorMap4D(m, n, z, filtrok, fx, fy, fz)];\n"
/*227*/		"				v = entrada[TensorMap(x * passox + m, y * passoy + n, z, entradatx, entradaty)];\n"
/*228*/		"				sum += f * v;\n"
/*229*/		"			}\n"
/*230*/		"	saida[k] = sum;\n"
/*231*/		"}\n"
/*232*/		"\n"
/*233*/		"\n"
/*234*/		"kV convCalcGradAndFixWeight(Vector filtros, Vector ds,\n"
/*235*/		"							Vector entrada, Vector gradFiltro,\n"
/*236*/		"							int fx, int fy, int fz,\n"
/*237*/		"							int entrada_tx, int entrada_ty,\n"
/*238*/		"							int saida_tx, int saida_ty,\n"
/*239*/		"							int passox, int passoy,\n"
/*240*/		"							double hitLearn, double momento, double weightDecay,\n"
/*241*/		"							int k0) {\n"
/*242*/		"	int k = get_global_id(0) + k0;\n"
/*243*/		"	int m, n, z, l;\n"
/*244*/		"	TensorRemap4D(k, m, n, z, l, fx, fy, fz)\n"
/*245*/		"	double soma = 0;\n"
/*246*/		"	for (int i = 0; i < saida_tx; ++i) {\n"
/*247*/		"		for (int j = 0; j < saida_ty; ++j) {\n"
/*248*/		"			soma += entrada[TensorMap(i * passox + m, j * passoy + n, z, entrada_tx, entrada_ty)]\n"
/*249*/		"					* ds[TensorMap(i, j, l, saida_tx, saida_ty)];\n"
/*250*/		"		}\n"
/*251*/		"	}\n"
/*252*/		"	double dw = soma + gradFiltro[k] * momento;\n"
/*253*/		"	double w = filtros[k];\n"
/*254*/		"	filtros[k] = w - hitLearn * (dw + w * weightDecay);\n"
/*255*/		"	gradFiltro[k] = dw;\n"
/*256*/		"}\n"
/*257*/		"\n"
/*258*/		"kV convCalcGradIn(Vector filtro,Vector gradEntrada,Vector gradNext,\n"
/*259*/		"				  int fx,int fy,int fz,\n"
/*260*/		"				  int passox,int passoy,\n"
/*261*/		"				  int entradatx,int entradaty,\n"
/*262*/		"				  int saidatx,int saidaty,int saidatz,\n"
/*263*/		"				  int k0) {\n"
/*264*/		"	int k = get_global_id(0) + k0;\n"
/*265*/		"	int x, y, z;\n"
/*266*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*267*/		"\n"
/*268*/		"	Range range_filtro;\n"
/*269*/		"	range_filtro.min.x = 0;\n"
/*270*/		"	if (x + fx <= entradatx) {\n"
/*271*/		"		range_filtro.min.x = x + fx - entradatx;\n"
/*272*/		"	}\n"
/*273*/		"	range_filtro.max.x = fx - 1;\n"
/*274*/		"	if (x - fx + 1 < 0) {\n"
/*275*/		"		range_filtro.max.x = x;\n"
/*276*/		"	}\n"
/*277*/		"	range_filtro.min.y = 0;\n"
/*278*/		"	if (y + fy <= entradaty) {\n"
/*279*/		"		range_filtro.min.y = y + fy - entradaty;\n"
/*280*/		"	}\n"
/*281*/		"	range_filtro.max.y = fy - 1;\n"
/*282*/		"	if (y - fy + 1 < 0) {\n"
/*283*/		"		range_filtro.max.y = y;\n"
/*284*/		"	}\n"
/*285*/		"	double somaErro = 0, pesoAplicado = 0;\n"
/*286*/		"	int i, j;\n"
/*287*/		"	for (int m = range_filtro.min.x; m <= range_filtro.max.x; m++) {\n"
/*288*/		"		i = (x - m) / passox;\n"
/*289*/		"		if (i * passox + m != x) continue;\n"
/*290*/		"		for (int n = range_filtro.min.y; n <= range_filtro.max.y; n++) {\n"
/*291*/		"			j = (y - n) / passoy;\n"
/*292*/		"			if (j * passoy + n != y) continue;\n"
/*293*/		"			for (int w = 0; w < saidatz; w++) {\n"
/*294*/		"				pesoAplicado = filtro[TensorMap4D(m, n, z, w, fx, fy, fz)];\n"
/*295*/		"				somaErro += pesoAplicado * gradNext[TensorMap(i, j, w, saidatx, saidaty)];\n"
/*296*/		"			}\n"
/*297*/		"		}\n"
/*298*/		"	}\n"
/*299*/		"	gradEntrada[k] = somaErro;\n"
/*300*/		"}\n"
/*301*/		"\n"
/*302*/		"\n"
/*303*/		"//convNc.h\n"
/*304*/		"//#include\"utils.h\"\n"
/*305*/		"kV convncSum(Vector filtro, Vector entrada, Vector saida,\n"
/*306*/		"             int passox, int passoy, int largx,\n"
/*307*/		"             int largy, int saidatx, int saidaty,\n"
/*308*/		"             int entradatx, int entradaty,int fx, int fy,\n"
/*309*/		"             int entradatz, int k0) {\n"
/*310*/		"	int k = get_global_id(0) + k0;\n"
/*311*/		"	int x, y, filtrok;\n"
/*312*/		"	TensorRemap(k, x, y, filtrok, saidatx, saidaty)\n"
/*313*/		"	Ponto3d mapeado = {x * passox, y * passoy, 0};\n"
/*314*/		"	double sum = 0, f, v;\n"
/*315*/		"	for (int i = 0; i < fx; i++)\n"
/*316*/		"		for (int j = 0; j < fy; j++)\n"
/*317*/		"			for (int z = 0; z < entradatz; z++) {\n"
/*318*/		"				f = filtro[TensorMap4D(i, j, z, filtrok, fx, fy, entradatz)];\n"
/*319*/		"				v = entrada[TensorMap(mapeado.x + i * largx, mapeado.y + j * largy, z, entradatx, entradaty)];\n"
/*320*/		"\n"
/*321*/		"				sum += f * v;\n"
/*322*/		"			}\n"
/*323*/		"	saida[k] = sum;\n"
/*324*/		"}\n"
/*325*/		"\n"
/*326*/		"kV convncFixWeight(Vector filtro, Vector grad, Vector gradOld,\n"
/*327*/		"				   double hitlearn,\n"
/*328*/		"                   double momento, double weightDecay, int k0) {\n"
/*329*/		"	int k = get_global_id(0) + k0;\n"
/*330*/		"	double m = grad[k] + gradOld[k] * momento;\n"
/*331*/		"	double w = filtro[k];\n"
/*332*/		"	filtro[k] = w - hitlearn * (m + w * weightDecay);\n"
/*333*/		"	gradOld[k] = m;\n"
/*334*/		"}\n"
/*335*/		"\n"
/*336*/		"kV convncCalcFiltro(Vector ds,\n"
/*337*/		"                    Vector entrada,\n"
/*338*/		"                    Vector gradFiltro,\n"
/*339*/		"                    int gradFiltro_tx,\n"
/*340*/		"                    int gradFiltro_ty,\n"
/*341*/		"                    int gradFiltro_tz,\n"
/*342*/		"\n"
/*343*/		"                    int entrada_tx,\n"
/*344*/		"                    int entrada_ty,\n"
/*345*/		"\n"
/*346*/		"                    int saida_tx,\n"
/*347*/		"                    int saida_ty,\n"
/*348*/		"\n"
/*349*/		"                    int passox,\n"
/*350*/		"                    int passoy,\n"
/*351*/		"\n"
/*352*/		"                    int largx,\n"
/*353*/		"                    int largy,\n"
/*354*/		"                    int k0) {\n"
/*355*/		"	int k = get_global_id(0) + k0;\n"
/*356*/		"	int m, n, z, l;\n"
/*357*/		"	TensorRemap4D(k, m, n, z, l, gradFiltro_tx, gradFiltro_ty, gradFiltro_tz)\n"
/*358*/		"	double soma = 0,aux;\n"
/*359*/		"	for (int i = 0; i < saida_tx; ++i) {\n"
/*360*/		"		for (int j = 0; j < saida_ty; ++j) {\n"
/*361*/		"			aux = entrada[TensorMap(i * passox + m * largx, j * passoy + n * largy, z, entrada_tx, entrada_ty)]\n"
/*362*/		"			        * ds[TensorMap(i, j, l, saida_tx, saida_ty)];\n"
/*363*/		"			//aux = (!(isnan(aux) || isinf(aux)))*aux;\n"
/*364*/		"			soma += aux;\n"
/*365*/		"		}\n"
/*366*/		"	}\n"
/*367*/		"	gradFiltro[k] = soma;\n"
/*368*/		"}\n"
/*369*/		"\n"
/*370*/		"/**\n"
/*371*/		" * equacao a ser implementada\n"
/*372*/		" * x = s*p + m*w\n"
/*373*/		" * onde:\n"
/*374*/		" * 	x é da entrada \n"
/*375*/		" * 	s é da saida\n"
/*376*/		" * 	m é do filtro\n"
/*377*/		" * 	s = (x - m*w)/p\n"
/*378*/		" */\n"
/*379*/		"kV convncCalcGrads(Vector filtro,\n"
/*380*/		"                   Vector entrada,\n"
/*381*/		"                   Vector gradEntrada,\n"
/*382*/		"                   Vector gradNext,\n"
/*383*/		"\n"
/*384*/		"                   int passox,\n"
/*385*/		"                   int passoy,\n"
/*386*/		"                   int largx,\n"
/*387*/		"                   int largy,\n"
/*388*/		"\n"
/*389*/		"                   int entradatx,\n"
/*390*/		"                   int entradaty,\n"
/*391*/		"                   int saidatx,\n"
/*392*/		"                   int saidaty,\n"
/*393*/		"\n"
/*394*/		"                   int fx,\n"
/*395*/		"                   int fy,\n"
/*396*/		"                   int fz,\n"
/*397*/		"                   int numFilters,\n"
/*398*/		"\n"
/*399*/		"                   int k0) {\n"
/*400*/		"	int k = get_global_id(0) + k0;\n"
/*401*/		"	int x, y, z;\n"
/*402*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*403*/		"	Range range_filtro ;\n"
/*404*/		"	range_filtro.min.x = 0;\n"
/*405*/		"	if ((entradatx - x - (fx - 1) * largx) < 0) {\n"
/*406*/		"		range_filtro.min.x = -entradatx + x + fx;\n"
/*407*/		"	}\n"
/*408*/		"	range_filtro.max.x = fx - 1;\n"
/*409*/		"	if (x - (fx - 1) * largx < 0) {\n"
/*410*/		"		range_filtro.max.x = x / largx;\n"
/*411*/		"	}\n"
/*412*/		"	range_filtro.min.y = 0;\n"
/*413*/		"	if ((entradaty - y - (fy - 1) * largy) < 0) {\n"
/*414*/		"		range_filtro.min.y = -entradaty + y + fy;\n"
/*415*/		"	}\n"
/*416*/		"	range_filtro.max.y = fy - 1;\n"
/*417*/		"	if (y - (fy - 1) * largy < 0) {\n"
/*418*/		"		range_filtro.max.y = y / largy;\n"
/*419*/		"	}\n"
/*420*/		"	int sx, sy;\n"
/*421*/		"	double somaErro = 0,aux, pesoAplicado = 0;\n"
/*422*/		"	for (int m = range_filtro.min.x; m <= range_filtro.max.x; m++) {\n"
/*423*/		"		sx = (x - m * largx) / passox;\n"
/*424*/		"		if (sx * passox + m * largx != x)continue;\n"
/*425*/		"		for (int n = range_filtro.min.y; n <= range_filtro.max.y; n++) {\n"
/*426*/		"			sy = (y - n * largy) / passox;\n"
/*427*/		"			if (sy * passoy + n * largy != y)continue;\n"
/*428*/		"			for (int l = 0; l < fz; l++) {\n"
/*429*/		"				pesoAplicado = filtro[TensorMap4D(m, n, z, l, fx, fy, fz)];\n"
/*430*/		"				aux = pesoAplicado * gradNext[TensorMap(sx, sy, l, saidatx, saidaty)];\n"
/*431*/		"				//aux = (!(isnan(aux) || isinf(aux)))*aux;\n"
/*432*/		"				somaErro +=aux;\n"
/*433*/		"			}\n"
/*434*/		"		}\n"
/*435*/		"	}\n"
/*436*/		"	gradEntrada[k] = somaErro;\n"
/*437*/		"}\n"
/*438*/		"\n"
/*439*/		"\n"
/*440*/		"//dropout.h\n"
/*441*/		"#define MAX_INT_DP  ((1UL << 31) - 1)\n"
/*442*/		"long randoml(unsigned long seed,unsigned long id) {\n"
/*443*/		"	seed += id;\n"
/*444*/		"	return (seed * 0x5deece66dL + 0xbL) & MAX_INT_DP;\n"
/*445*/		"}\n"
/*446*/		"\n"
/*447*/		"double randomD(unsigned long seed,unsigned long id) {\n"
/*448*/		"	return (double) randoml(seed, id) / (double) MAX_INT_DP;\n"
/*449*/		"}\n"
/*450*/		"\n"
/*451*/		"kV dropativa(Vector entrada, Vector saida, __global char *hitmap, long seed,\n"
/*452*/		"			 double pativa, int k0) {\n"
/*453*/		"	int i = get_global_id(0) + k0;\n"
/*454*/		"//	printf(\"kernel %lf %lf %g %g\\n\",randomD(seed, i),pativa,(double)(seed +i),(double)MAX_INT_DP);\n"
/*455*/		"	char teste = (char) (randomD(seed, i) <= pativa);\n"
/*456*/		"	hitmap[i] = teste;\n"
/*457*/		"	saida[i] = teste * entrada[i];\n"
/*458*/		"}\n"
/*459*/		"\n"
/*460*/		"\n"
/*461*/		"kV dropcalcgrad(Vector gradentrada, __global char *hitmap, Vector gradnext, int k0) {\n"
/*462*/		"	int i = get_global_id(0) + k0;\n"
/*463*/		"	gradentrada[i] = hitmap[i] * gradnext[i];\n"
/*464*/		"}\n"
/*465*/		"\n"
/*466*/		"//fullconnect.h\n"
/*467*/		"double sigmoid(double x) { return 1.0 / (1.0 + exp(-x)); }\n"
/*468*/		"\n"
/*469*/		"double difsigmoid(double x) {\n"
/*470*/		"	double tmp = sigmoid(x);\n"
/*471*/		"	return tmp * (1.0 - tmp);\n"
/*472*/		"}\n"
/*473*/		"\n"
/*474*/		"double tanghG(double x) { return tanh(x); }\n"
/*475*/		"\n"
/*476*/		"double diftanhG(double x) {\n"
/*477*/		"	double tmp = tanh(x);\n"
/*478*/		"	return (1.0 - tmp * tmp);\n"
/*479*/		"}\n"
/*480*/		"\n"
/*481*/		"double relu(double x) { return x > 0 ? x : 0.0; }\n"
/*482*/		"\n"
/*483*/		"double difrelu(double x) { return x > 0 ? 1.0 : 0.0; }\n"
/*484*/		"\n"
/*485*/		"double func(int id, double x) {\n"
/*486*/		"	switch (id) {\n"
/*487*/		"		case 0:\n"
/*488*/		"			return sigmoid(x);\n"
/*489*/		"		case 1:\n"
/*490*/		"			return difsigmoid(x);\n"
/*491*/		"		case 2:\n"
/*492*/		"			return tanghG(x);\n"
/*493*/		"		case 3:\n"
/*494*/		"			return diftanhG(x);\n"
/*495*/		"		case 4:\n"
/*496*/		"			return relu(x);\n"
/*497*/		"		case 5:\n"
/*498*/		"			return difrelu(x);\n"
/*499*/		"		default:\n"
/*500*/		"			return 0;\n"
/*501*/		"	}\n"
/*502*/		"}\n"
/*503*/		"\n"
/*504*/		"kV fullfeed(Vector entrada, Vector pesos, Vector z, Vector saida,\n"
/*505*/		"			int funcaoativacao, int inx, int iny, int inz, int pesosx, int pesosy, int k0) {\n"
/*506*/		"	int m = get_global_id(0) + k0;\n"
/*507*/		"	double valorEntrada = 0;\n"
/*508*/		"	int n;\n"
/*509*/		"	for (n = 0; n < pesosy; n++) {\n"
/*510*/		"		valorEntrada += entrada[n] * pesos[TensorMap(m, n, 0, pesosx, pesosy)];\n"
/*511*/		"	}\n"
/*512*/		"	z[m] = valorEntrada;\n"
/*513*/		"	saida[m] = func(funcaoativacao, valorEntrada);\n"
/*514*/		"}\n"
/*515*/		"\n"
/*516*/		"kV fullfixweight(Vector a,\n"
/*517*/		"			  Vector pesos,\n"
/*518*/		"			  Vector dw,\n"
/*519*/		"			  Vector dz,\n"
/*520*/		"			  double hitlearn,\n"
/*521*/		"			  double decaimentoDePeso,\n"
/*522*/		"			  double momento,\n"
/*523*/		"			  int pesosy,\n"
/*524*/		"			  int k0) {\n"
/*525*/		"	int k = get_global_id(0) + k0;\n"
/*526*/		"	int m, n;\n"
/*527*/		"	m = k / pesosy;\n"
/*528*/		"	n = k % pesosy;\n"
/*529*/		"	dw[k] = dz[m] * a[n] + dw[k] * momento;\n"
/*530*/		"	pesos[k] = pesos[k] - hitlearn * (dw[k] + pesos[k] * decaimentoDePeso);\n"
/*531*/		"}\n"
/*532*/		"\n"
/*533*/		"kV fullcalcgrads1(Vector dz, Vector ds, Vector z, int dfa, int k0) {\n"
/*534*/		"	int m = get_global_id(0) + k0;\n"
/*535*/		"	dz[m] = ds[m] * func(dfa, z[m]);\n"
/*536*/		"}\n"
/*537*/		"\n"
/*538*/		"kV fullcalcgrads2(Vector dz, Vector da, Vector pesos, int pesosx, int pesosy,\n"
/*539*/		"				  int k0) {\n"
/*540*/		"	int m = get_global_id(0) + k0;\n"
/*541*/		"	double soma = 0;\n"
/*542*/		"	for (int n = 0; n < pesosx; ++n) {\n"
/*543*/		"		soma += dz[n] * pesos[TensorMap(n, m, 0, pesosx, pesosy)];\n"
/*544*/		"	}\n"
/*545*/		"	da[m] = soma;\n"
/*546*/		"}\n"
/*547*/		"\n"
/*548*/		"//padding.h\n"
/*549*/		"kV paddingfeed(Vector in,Vector out,\n"
/*550*/		"			   int txi,int tyi,\n"
/*551*/		"			   int txo,int tyo,\n"
/*552*/		"			   int t, int l ,\n"
/*553*/		"			   int k0){\n"
/*554*/		"	int k = get_global_id(0) + k0;\n"
/*555*/		"	int x, y, z;\n"
/*556*/		"	TensorRemap(k, x, y, z, txi, tyi)\n"
/*557*/		"	int s = TensorMap(x+t,y+l,z,txo,tyo);\n"
/*558*/		"	out[s] = in[k];\n"
/*559*/		"}\n"
/*560*/		"kV paddingBack(Vector gradNext,Vector gradin,\n"
/*561*/		"			   int txi,int tyi,\n"
/*562*/		"			   int txo,int tyo,\n"
/*563*/		"			   int t, int l , int k0){\n"
/*564*/		"	int k = get_global_id(0) + k0;\n"
/*565*/		"	int x, y, z;\n"
/*566*/		"	TensorRemap(k, x, y, z, txi, tyi)\n"
/*567*/		"	int s = TensorMap(x+t,y+l,z,txo,tyo);\n"
/*568*/		"	gradin[k] = gradNext[s];\n"
/*569*/		"}\n"
/*570*/		"//pool.h\n"
/*571*/		"kV poolativa(Vector entrada, Vector saida, int lenFilter,\n"
/*572*/		"			 int passo, int saidatx, int saidaty, int entradatx, int entradaty, int k0) {\n"
/*573*/		"	int k = get_global_id(0) + k0;\n"
/*574*/		"	int x, y, z;\n"
/*575*/		"	TensorRemap(k, x, y, z, saidatx, saidaty)\n"
/*576*/		"\n"
/*577*/		"	Ponto3d mapeado = {x * passo, y * passo, 0};\n"
/*578*/		"	double mval, v;\n"
/*579*/		"	mval = -DBL_MAX;\n"
/*580*/		"	for (int i = 0; i < lenFilter; ++i) {\n"
/*581*/		"		for (int j = 0; j < lenFilter; ++j) {\n"
/*582*/		"			v = entrada[TensorMap(mapeado.x + i, mapeado.y + j, z, entradatx, entradaty)];\n"
/*583*/		"			if (v > mval)\n"
/*584*/		"				mval = v;\n"
/*585*/		"		}\n"
/*586*/		"	}\n"
/*587*/		"	saida[k] = mval;\n"
/*588*/		"}\n"
/*589*/		"\n"
/*590*/		"\n"
/*591*/		"kV poolCalcGrads(Vector entrada, Vector gradEntrada,\n"
/*592*/		"				 Vector gradNext, Vector saida,\n"
/*593*/		"				 int fx, int fy, int px, int py,\n"
/*594*/		"				 int entradatx, int entradaty,\n"
/*595*/		"				 int saidatx, int saidaty,\n"
/*596*/		"				 int k0) {\n"
/*597*/		"	int k = get_global_id(0) + k0;\n"
/*598*/		"	int x, y, z;\n"
/*599*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*600*/		"	Range range_filtro;\n"
/*601*/		"	range_filtro.min.x = 0;\n"
/*602*/		"	if (x + fx <= entradatx) {\n"
/*603*/		"		range_filtro.min.x = x + fx - entradatx;\n"
/*604*/		"	}\n"
/*605*/		"	range_filtro.max.x = fx - 1;\n"
/*606*/		"	if (x - fx + 1 < 0) {\n"
/*607*/		"		range_filtro.max.x = x;\n"
/*608*/		"	}\n"
/*609*/		"	range_filtro.min.y = 0;\n"
/*610*/		"	if (y + fy <= entradaty) {\n"
/*611*/		"		range_filtro.min.y = y + fy - entradaty;\n"
/*612*/		"	}\n"
/*613*/		"	range_filtro.max.y = fy - 1;\n"
/*614*/		"	if (y - fy + 1 < 0) {\n"
/*615*/		"		range_filtro.max.y = y;\n"
/*616*/		"	}\n"
/*617*/		"	int i, j;//saida\n"
/*618*/		"	gradEntrada[TensorMap(x, y, z, entradatx, entradaty)] =0;\n"
/*619*/		"	for (int m = range_filtro.min.x; m <= range_filtro.max.x; m++) {\n"
/*620*/		"		i = (x - m) / px;\n"
/*621*/		"		if (i * px + m != x)continue;\n"
/*622*/		"		for (int n = range_filtro.min.y; n <= range_filtro.max.y; n++) {\n"
/*623*/		"			j = (y - n) / py;\n"
/*624*/		"			if (j * py + n != y)continue;\n"
/*625*/		"			if (entrada[TensorMap(x, y, z, entradatx, entradaty)] ==\n"
/*626*/		"				saida[TensorMap(i, j, z, saidatx, saidaty)]) {\n"
/*627*/		"				gradEntrada[TensorMap(x, y, z, entradatx, entradaty)] =\n"
/*628*/		"						gradNext[TensorMap(i, j, z, saidatx, saidaty)];\n"
/*629*/		"				return;\n"
/*630*/		"			}\n"
/*631*/		"		}\n"
/*632*/		"	}\n"
/*633*/		"\n"
/*634*/		"}\n"
/*635*/		"\n"
/*636*/		"\n"
/*637*/		"//poolav.h\n"
/*638*/		"kV PoolAvativa(Vector entrada, Vector saida, int lenFilter,\n"
/*639*/		"			   int passo, int saidatx, int saidaty, int entradatx, int entradaty, int k0) {\n"
/*640*/		"	int k = get_global_id(0) + k0;\n"
/*641*/		"	int x, y, z;\n"
/*642*/		"	TensorRemap(k, x, y, z, saidatx, saidaty)\n"
/*643*/		"\n"
/*644*/		"	Ponto3d mapeado = {x * passo, y * passo, 0};\n"
/*645*/		"	double soma = 0, v;\n"
/*646*/		"\n"
/*647*/		"	for (int i = 0; i < lenFilter; ++i) {\n"
/*648*/		"		for (int j = 0; j < lenFilter; ++j) {\n"
/*649*/		"			soma += entrada[TensorMap(mapeado.x + i, mapeado.y + j, z, entradatx, entradaty)];\n"
/*650*/		"		}\n"
/*651*/		"	}\n"
/*652*/		"	saida[k] = soma / (lenFilter * lenFilter);\n"
/*653*/		"}\n"
/*654*/		"\n"
/*655*/		"\n"
/*656*/		"kV PoolAvCalcGrads(Vector entrada, Vector gradEntrada, Vector gradNext, Vector saida,\n"
/*657*/		"				   int fx, int fy, int px, int py,\n"
/*658*/		"				   int entradatx, int entradaty, int saidatx, int saidaty,\n"
/*659*/		"				   int k0) {\n"
/*660*/		"	int k = get_global_id(0) + k0;\n"
/*661*/		"	int x, y, z;\n"
/*662*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*663*/		"	Range range_filtro;\n"
/*664*/		"	range_filtro.min.x = 0;\n"
/*665*/		"	if (x + fx <= entradatx) {\n"
/*666*/		"		range_filtro.min.x = x + fx - entradatx;\n"
/*667*/		"	}\n"
/*668*/		"	range_filtro.max.x = fx - 1;\n"
/*669*/		"	if (x - fx + 1 < 0) {\n"
/*670*/		"		range_filtro.max.x = x;\n"
/*671*/		"	}\n"
/*672*/		"	range_filtro.min.y = 0;\n"
/*673*/		"	if (y + fy <= entradaty) {\n"
/*674*/		"		range_filtro.min.y = y + fy - entradaty;\n"
/*675*/		"	}\n"
/*676*/		"	range_filtro.max.y = fy - 1;\n"
/*677*/		"	if (y - fy + 1 < 0) {\n"
/*678*/		"		range_filtro.max.y = y;\n"
/*679*/		"	}\n"
/*680*/		"	int i, j;//saida\n"
/*681*/		"	double soma = 0;\n"
/*682*/		"	for (int m = range_filtro.min.x; m <= range_filtro.max.x; m++) {\n"
/*683*/		"		i = (x - m) / px;\n"
/*684*/		"		if (i * px + m != x)continue;\n"
/*685*/		"		for (int n = range_filtro.min.y; n <= range_filtro.max.y; n++) {\n"
/*686*/		"			j = (y - n) / py;\n"
/*687*/		"			if (j * py + n != y)continue;\n"
/*688*/		"			soma += gradNext[TensorMap(i, j, z, saidatx, saidaty)];\n"
/*689*/		"		}\n"
/*690*/		"	}\n"
/*691*/		"	gradEntrada[TensorMap(x, y, z, entradatx, entradaty)] = soma / (fx * fy);\n"
/*692*/		"\n"
/*693*/		"}\n"
/*694*/		"\n"
/*695*/		"\n"
/*696*/		"//relu.h\n"
/*697*/		"kV reluativa(Vector entrada, Vector saida, int k0) {\n"
/*698*/		"	int k = get_global_id(0) + k0;\n"
/*699*/		"	double v = entrada[k];\n"
/*700*/		"	if (v < 0)\n"
/*701*/		"		v = 0;\n"
/*702*/		"	saida[k] = v;\n"
/*703*/		"}\n"
/*704*/		"\n"
/*705*/		"kV relucalcgrad(Vector gradentrada, Vector entrada, Vector gradnext, int k0) {\n"
/*706*/		"	int k = get_global_id(0) + k0;\n"
/*707*/		"	gradentrada[k] = entrada[k] <= 0.0 ? (0) : gradnext[k];\n"
/*708*/		"}\n"
/*709*/		"\n"
/*710*/		"//softmax.h\n"
/*711*/		"kV SoftMaxativa1(Vector entrada, Vector exponent, Vector soma, int entradatx,\n"
/*712*/		"                 int entradaty,\n"
/*713*/		"                 int k0) {\n"
/*714*/		"	int k = get_global_id(0) + k0;\n"
/*715*/		"	int x, y, z;\n"
/*716*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*717*/		"	exponent[k] = exp(entrada[k]);\n"
/*718*/		"	soma[z] += exponent[k];\n"
/*719*/		"}\n"
/*720*/		"\n"
/*721*/		"kV SoftMaxativa2(Vector exponet, Vector soma, Vector saida,\n"
/*722*/		"                 int saidatx, int saidaty, int k0) {\n"
/*723*/		"	int k = get_global_id(0) + k0;\n"
/*724*/		"	int x, y, z;\n"
/*725*/		"	TensorRemap(k, x, y, z, saidatx, saidaty)\n"
/*726*/		"	saida[k] = exponet[TensorMap(x, y, z, saidatx, saidaty)] / soma[z];\n"
/*727*/		"}\n"
/*728*/		"\n"
/*729*/		"kV softMaxcalcgrad(Vector gradentrada, Vector entrada, Vector gradnext, int k0) {\n"
/*730*/		"	int k = get_global_id(0) + k0;\n"
/*731*/		"	double xi = entrada[k];\n"
/*732*/		"	gradentrada[k] = xi * (1.0 - xi) * gradnext[k];\n"
/*733*/		"}\n"
/*734*/		"\n"
/*735*/		"\n"
/*736*/		"#endif //GAB_KERNELS_OPENCL_H\n"
;
#endif // KERNELS_H
