#ifndef KERNELS_H
#define KERNELS_H
const char default_kernel[] = 
/*1*/		"//utils.h\n"
/*2*/		"// Created by Xx220xX on 10/05/2020.\n"
/*3*/		"\n"
/*4*/		"#define Vector __global double *\n"
/*5*/		"\n"
/*6*/		"#define kV __kernel void\n"
/*7*/		"\n"
/*8*/		"#define TensorMap(x, y, z, tx, ty)((z)*(ty*tx)+(x)*ty+(y))\n"
/*9*/		"\n"
/*10*/		"#define TensorMap4D(x, y, z, l, tx, ty, tz)((l)*(ty)*(tx)*(tz)+(z)*(ty*tx)+(x)*ty+(y))\n"
/*11*/		"\n"
/*12*/		"#define TensorRemap4D(total, _x_, _y_, _z_, _l_, tx, ty, tz)\\\n"
/*13*/		"_y_ = total%ty      ;                                        \\\n"
/*14*/		"_x_ = (total - _y_)%(ty*tx)/ty ;                             \\\n"
/*15*/		"_z_ = (total- _x_*ty - _y_)%(tx*ty*tz)/(ty*tx)  ;            \\\n"
/*16*/		"_l_ = (total -_z_*tx*ty -_x_*ty - _y_)/(tx*ty*tz);\n"
/*17*/		"\n"
/*18*/		"\n"
/*19*/		"#define TensorRemap(total, _x_, _y_, _z_, tx, ty)\\\n"
/*20*/		"_y_ = total % ty;\\\n"
/*21*/		"_x_ = ((total - _y_) % (ty * tx)) / ty;\\\n"
/*22*/		"_z_ = (k - _x_ * ty - _y_) / (tx * ty);\n"
/*23*/		"\n"
/*24*/		"#define TensorRemap2D(total, x, y, ty)\\\n"
/*25*/		"y = total % ty;\\\n"
/*26*/		"x = total/ ty;\n"
/*27*/		"\n"
/*28*/		"typedef struct {\n"
/*29*/		"	int x, y, z;\n"
/*30*/		"} Ponto3d;\n"
/*31*/		"\n"
/*32*/		"typedef struct {\n"
/*33*/		"	Ponto3d min, max;\n"
/*34*/		"} Range;\n"
/*35*/		"\n"
/*36*/		"kV createImg(__global unsigned char *out, Vector v, int vx, int vy, int imi, int imy, int k0) {\n"
/*37*/		"	int k = get_global_id(0) + k0;\n"
/*38*/		"	int i, j, z;\n"
/*39*/		"	TensorRemap(k, i, j, z, vx, vy)\n"
/*40*/		"	imi = imi + i;\n"
/*41*/		"	int imj = j + z * vy + z;\n"
/*42*/		"	out[imi * imy + imj] = ((int) v[k]) & 0xff;\n"
/*43*/		"}\n"
/*44*/		"\n"
/*45*/		"kV printTensor(Vector t, int mx, int my, int mz, int ofset) {\n"
/*46*/		"	for (int z = 0; z < mz; z++) {\n"
/*47*/		"		printf(\"[Dim%d]\\n\", z);\n"
/*48*/		"		for (int x = 0; x < mx; x++) {\n"
/*49*/		"			for (int y = 0; y < my; y++) {\n"
/*50*/		"\n"
/*51*/		"				printf(\"%.4lf \\t\", t[TensorMap(x, y, z, mx, my) + ofset]);\n"
/*52*/		"			}\n"
/*53*/		"			printf(\"\\n\");\n"
/*54*/		"		}\n"
/*55*/		"	}\n"
/*56*/		"}\n"
/*57*/		"\n"
/*58*/		"kV norm(Vector v, Vector out, int len) {\n"
/*59*/		"	double s = 0;\n"
/*60*/		"	for (int i = 0; i < len; ++i) {\n"
/*61*/		"		s += v[i] * v[i];\n"
/*62*/		"	}\n"
/*63*/		"	out[0] = pow(s, 0.5);\n"
/*64*/		"}\n"
/*65*/		"\n"
/*66*/		"kV maxID(Vector v, Vector out, int len) {\n"
/*67*/		"	int s = 0;\n"
/*68*/		"	for (int i = 1; i < len; ++i) {\n"
/*69*/		"		if (v[s] < v[i]) {\n"
/*70*/		"			s = i;\n"
/*71*/		"		}\n"
/*72*/		"	}\n"
/*73*/		"	out[0] = (double) s;\n"
/*74*/		"}\n"
/*75*/		"\n"
/*76*/		"kV\n"
/*77*/		"normalizeVector(Vector input, Vector saida, double multiplicador, double somador, double subtrator,\n"
/*78*/		"                int k0) {\n"
/*79*/		"	int k = get_global_id(0) + k0;\n"
/*80*/		"	saida[k] = (input[k] + somador) * multiplicador - subtrator;\n"
/*81*/		"}\n"
/*82*/		"\n"
/*83*/		"kV findExtremes(Vector input, Vector output, int len) {\n"
/*84*/		"	double mn = input[0], mx = input[0];\n"
/*85*/		"	for (int i = 1; i < len; ++i) {\n"
/*86*/		"		if (input[i] > mx) mx = input[i];\n"
/*87*/		"		if (input[i] < mn) mn = input[i];\n"
/*88*/		"	}\n"
/*89*/		"	output[0] = mn;\n"
/*90*/		"	output[1] = mx;\n"
/*91*/		"}\n"
/*92*/		"\n"
/*93*/		"kV sub(Vector grad, Vector saida, Vector target, int k0) {\n"
/*94*/		"	int k = get_global_id(0) + k0;\n"
/*95*/		"\n"
/*96*/		"	grad[k] = saida[k] - target[k];\n"
/*97*/		"}\n"
/*98*/		"\n"
/*99*/		"kV div(Vector v, double value, int k0) {\n"
/*100*/		"	int k = get_global_id(0) + k0;\n"
/*101*/		"	v[k] = v[k] / value;\n"
/*102*/		"}\n"
/*103*/		"\n"
/*104*/		"kV divIntDo(__global unsigned char *src, Vector v, double value, int k0) {\n"
/*105*/		"	int k = get_global_id(0) + k0;\n"
/*106*/		"	v[k] = ((double) src[k]) / value;\n"
/*107*/		"}\n"
/*108*/		"\n"
/*109*/		"kV int2vector(__global unsigned char *ints, Vector v, int noptiobs, int k0) {\n"
/*110*/		"	int k = get_global_id(0) + k0;\n"
/*111*/		"	for (int j = 0; j < noptiobs; j++) {\n"
/*112*/		"		v[k * noptiobs + j] = (double) (j == ints[k]);\n"
/*113*/		"	}\n"
/*114*/		"}\n"
/*115*/		"\n"
/*116*/		"\n"
/*117*/		"int normaliza_range(double f, int max, int lim_min) {\n"
/*118*/		"	if (f <= 0)return 0;\n"
/*119*/		"	if (f >= max - 1)return max - 1;\n"
/*120*/		"	if (lim_min) return ceil(f);\n"
/*121*/		"	else return floor(f);\n"
/*122*/		"}\n"
/*123*/		"\n"
/*124*/		"Range mapeia_entrada_saida(int x, int y, int passo, int tamanhoFiltro, int saidatx, int saidaty, int numeroFiltros) {\n"
/*125*/		"	double a = x, b = y;\n"
/*126*/		"	Range r;\n"
/*127*/		"	r.min.x = normaliza_range((a - tamanhoFiltro + 1) / passo, saidatx, 1);\n"
/*128*/		"	r.min.y = normaliza_range((b - tamanhoFiltro + 1) / passo, saidaty, 1);\n"
/*129*/		"	r.min.z = 0;\n"
/*130*/		"\n"
/*131*/		"	r.max.x = normaliza_range(a / passo, saidatx, 0);\n"
/*132*/		"	r.max.y = normaliza_range(b / passo, saidaty, 0);\n"
/*133*/		"	r.max.z = numeroFiltros - 1;\n"
/*134*/		"	return r;\n"
/*135*/		"}\n"
/*136*/		"\n"
/*137*/		"//bathnorm.h\n"
/*138*/		"\n"
/*139*/		"// achar a media\n"
/*140*/		"kV BatchNormMedia(Vector entrada, Vector media,\n"
/*141*/		"                  int entradatx, int entradaty, int k0) {\n"
/*142*/		"	int z = get_global_id(0) + k0;\n"
/*143*/		"	int x, y;\n"
/*144*/		"	double m = 0;\n"
/*145*/		"	for (x = 0; x < entradatx; x++) {\n"
/*146*/		"		for (y = 0; y < entradaty; y++) {\n"
/*147*/		"			m += entrada[TensorMap(x, y, z, entradatx, entradaty)];\n"
/*148*/		"		}\n"
/*149*/		"	}\n"
/*150*/		"	media[z] = m / (double) (entradatx * entradaty);\n"
/*151*/		"}\n"
/*152*/		"\n"
/*153*/		"// achar a diferenca\n"
/*154*/		"kV BatchNormDiferenca(Vector entrada, Vector media,\n"
/*155*/		"                      Vector diferenca,\n"
/*156*/		"                      Vector diferencaquad,\n"
/*157*/		"                      int entradatx, int entradaty, int k0) {\n"
/*158*/		"	int x, y, z;\n"
/*159*/		"	int k = get_global_id(0) + k0;\n"
/*160*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*161*/		"	diferenca[k] = entrada[k] - media[z];\n"
/*162*/		"	diferencaquad[k] = diferenca[k] * diferenca[k];\n"
/*163*/		"}\n"
/*164*/		"\n"
/*165*/		"kV BatchNormVariance(Vector dif, Vector difQuad,\n"
/*166*/		"                     Vector sumdiferenca, Vector variancia,\n"
/*167*/		"                     double episolon, int diftx, int difty,\n"
/*168*/		"                     int k0) {\n"
/*169*/		"	int z = get_global_id(0) + k0;\n"
/*170*/		"	double sum = 0;\n"
/*171*/		"	double sumdif = 0;\n"
/*172*/		"	for (int x = 0; x < diftx; x++) {\n"
/*173*/		"		for (int y = 0; y < difty; y++) {\n"
/*174*/		"			sum += difQuad[TensorMap(x, y, z, diftx, difty)];\n"
/*175*/		"			sumdif += dif[TensorMap(x, y, z, diftx, difty)];\n"
/*176*/		"		}\n"
/*177*/		"	}\n"
/*178*/		"	sumdiferenca[z] = sumdif;\n"
/*179*/		"	variancia[z] = sqrt(sum / (difty * diftx) + episolon);\n"
/*180*/		"}\n"
/*181*/		"\n"
/*182*/		"// normaliza\n"
/*183*/		"kV BatchNormNormaliza(Vector saida,\n"
/*184*/		"                      Vector norma,\n"
/*185*/		"                      Vector diferenca,\n"
/*186*/		"                      Vector variancia,\n"
/*187*/		"                      Vector Y,\n"
/*188*/		"                      Vector B,\n"
/*189*/		"                      int diferencatx, int diferencaty, int k0) {\n"
/*190*/		"	int x, y, z;\n"
/*191*/		"	int k = get_global_id(0) + k0;\n"
/*192*/		"	TensorRemap(k, x, y, z, diferencatx, diferencaty)\n"
/*193*/		"	norma[k] = diferenca[k] / variancia[z];\n"
/*194*/		"	saida[k] = norma[k] * Y[z] + B[z];\n"
/*195*/		"}\n"
/*196*/		"\n"
/*197*/		"\n"
/*198*/		"kV BatchNormaCalcGrad1(Vector gradIn,\n"
/*199*/		"                       Vector gradNext,\n"
/*200*/		"                       Vector variancia,\n"
/*201*/		"                       Vector media,\n"
/*202*/		"                       Vector Y,\n"
/*203*/		"\n"
/*204*/		"                       Vector somaDif,\n"
/*205*/		"                       Vector entrada,\n"
/*206*/		"                       int entradatx,\n"
/*207*/		"                       int entradaty,\n"
/*208*/		"                       int k0) {\n"
/*209*/		"	int x, y, z;\n"
/*210*/		"	int k = get_global_id(0) + k0;\n"
/*211*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*212*/		"	double M = entradatx * entradaty;\n"
/*213*/		"	double dif_variance = somaDif[z] - entrada[k] + media[z] + (entrada[k] - media[z]) * (M - 1);\n"
/*214*/		"	dif_variance = dif_variance * -1.0 / (variancia[z] * M * M);\n"
/*215*/		"\n"
/*216*/		"	double didx = variancia[z] * (M - 1 / M) + (media[z] - entrada[k]) * dif_variance;\n"
/*217*/		"	didx = didx / (variancia[z] * variancia[z]);\n"
/*218*/		"	didx = didx * gradNext[k];\n"
/*219*/		"	gradIn[k] = didx * Y[z];\n"
/*220*/		"}\n"
/*221*/		"\n"
/*222*/		"kV BatchNormaCalcGrad2(Vector gradNext,\n"
/*223*/		"                       Vector norma,\n"
/*224*/		"                       Vector gradY,\n"
/*225*/		"                       Vector gradB,\n"
/*226*/		"                       int entradatx,\n"
/*227*/		"                       int entradaty,\n"
/*228*/		"                       int k0) {\n"
/*229*/		"	int z = get_global_id(0) + k0;\n"
/*230*/		"	double sumY = 0;\n"
/*231*/		"	double sumB = 0;\n"
/*232*/		"	int k;\n"
/*233*/		"	for (int x = 0; x < entradatx; ++x) {\n"
/*234*/		"		for (int y = 0; y < entradaty; ++y) {\n"
/*235*/		"			k = TensorMap(x, y, z, entradatx, entradaty);\n"
/*236*/		"			sumY += gradNext[k];\n"
/*237*/		"			sumB += gradNext[k] * norma[k];\n"
/*238*/		"		}\n"
/*239*/		"	}\n"
/*240*/		"	gradB[z] = sumB;\n"
/*241*/		"	gradY[z] = sumY;\n"
/*242*/		"}\n"
/*243*/		"\n"
/*244*/		"\n"
/*245*/		"kV batchNormCorrigePeso(Vector gradY,\n"
/*246*/		"                        Vector gradB,\n"
/*247*/		"                        Vector Y,\n"
/*248*/		"                        Vector B,\n"
/*249*/		"                        double hitlearn,\n"
/*250*/		"                        int k0) {\n"
/*251*/		"	int z = get_global_id(0) + k0;\n"
/*252*/		"	B[z] = B[z] - gradB[z] * hitlearn;\n"
/*253*/		"	Y[z] = Y[z] - gradY[z] * hitlearn;\n"
/*254*/		"}\n"
/*255*/		"//conv.h\n"
/*256*/		"//#include\"utils.h\"\n"
/*257*/		"kV convSum(Vector filtro, Vector entrada, Vector saida,\n"
/*258*/		"           int passo, int saidatx, int saidaty, int entradatx, int entradaty,\n"
/*259*/		"           int lenFilter, int entradatz, int k0) {\n"
/*260*/		"	int k = get_global_id(0) + k0;\n"
/*261*/		"	int x, y, filtrok;\n"
/*262*/		"	TensorRemap(k, x, y, filtrok, saidatx, saidaty)\n"
/*263*/		"	Ponto3d mapeado = {x * passo, y * passo, 0};\n"
/*264*/		"	double sum = 0, f, v;\n"
/*265*/		"	for (int i = 0; i < lenFilter; i++)\n"
/*266*/		"		for (int j = 0; j < lenFilter; j++)\n"
/*267*/		"			for (int z = 0; z < entradatz; z++) {\n"
/*268*/		"				f = filtro[TensorMap4D(i, j, z, filtrok, lenFilter, lenFilter, entradatz)];\n"
/*269*/		"				v = entrada[TensorMap(mapeado.x + i, mapeado.y + j, z, entradatx, entradaty)];\n"
/*270*/		"				sum += f * v;\n"
/*271*/		"			}\n"
/*272*/		"	saida[k] = sum;\n"
/*273*/		"}\n"
/*274*/		"\n"
/*275*/		"kV convFixWeight(Vector filtro, Vector grad, Vector gradOld, double hitlearn,\n"
/*276*/		"                 double momento, double weightDecay, int k0) {\n"
/*277*/		"	int k = get_global_id(0) + k0;\n"
/*278*/		"	double m = grad[k] + gradOld[k] * momento;\n"
/*279*/		"	double w = filtro[k];\n"
/*280*/		"	filtro[k] = w - hitlearn * (m + w * weightDecay);\n"
/*281*/		"	gradOld[k] = m;\n"
/*282*/		"}\n"
/*283*/		"\n"
/*284*/		"kV convCalcFiltro(     Vector ds,\n"
/*285*/		"					   Vector entrada,\n"
/*286*/		"					   Vector gradFiltro,\n"
/*287*/		"                       int gradFiltro_tx,\n"
/*288*/		"                       int gradFiltro_ty,\n"
/*289*/		"                       int gradFiltro_tz,\n"
/*290*/		"                       int entrada_tx,\n"
/*291*/		"                       int entrada_ty,\n"
/*292*/		"                       int saida_tx,\n"
/*293*/		"                       int saida_ty,\n"
/*294*/		"                       int passo,\n"
/*295*/		"                       int k0) {\n"
/*296*/		"	int k = get_global_id(0) + k0;\n"
/*297*/		"	int m, n, z, l;\n"
/*298*/		"//	printf(\"kernel %d\\n\",k);\n"
/*299*/		"	TensorRemap4D(k, m, n, z, l, gradFiltro_tx, gradFiltro_ty, gradFiltro_tz)\n"
/*300*/		"	double soma = 0;\n"
/*301*/		"	for (int i = 0; i < saida_tx; ++i) {\n"
/*302*/		"		for (int j = 0; j < saida_ty; ++j) {\n"
/*303*/		"			soma += entrada[TensorMap(i*passo+m, j*passo+n,z,entrada_tx,entrada_ty)]\n"
/*304*/		"				   *ds[TensorMap(i,j,l,saida_tx,saida_ty)];\n"
/*305*/		"		}\n"
/*306*/		"	}\n"
/*307*/		"	gradFiltro[k] = soma;\n"
/*308*/		"}\n"
/*309*/		"\n"
/*310*/		"kV convCalcGrads(Vector filtro,\n"
/*311*/		"				 Vector entrada,\n"
/*312*/		"                 Vector gradEntrada,\n"
/*313*/		"                 Vector gradNext,\n"
/*314*/		"                 int lenFilter,\n"
/*315*/		"                 int filtroz,\n"
/*316*/		"                 int passo,\n"
/*317*/		"                 int entradatx,\n"
/*318*/		"                 int entradaty,\n"
/*319*/		"                 int saidatx,\n"
/*320*/		"                 int saidaty,\n"
/*321*/		"                 int numFilters,\n"
/*322*/		"                 int k0) {\n"
/*323*/		"	int k = get_global_id(0) + k0;\n"
/*324*/		"	int x, y, z;\n"
/*325*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*326*/		"	Range range = mapeia_entrada_saida(x, y, passo, lenFilter, saidatx, saidaty, numFilters);\n"
/*327*/		"	int minX, minY;\n"
/*328*/		"	double somaErro = 0, pesoAplicado = 0;\n"
/*329*/		"\n"
/*330*/		"	for (int i = range.min.x; i <= range.max.x; i++) {\n"
/*331*/		"		minX = i * passo;\n"
/*332*/		"		for (int j = range.min.y; j <= range.max.y; j++) {\n"
/*333*/		"			minY = j * passo;\n"
/*334*/		"			for (int l = range.min.z; l <= range.max.z; l++) {\n"
/*335*/		"				pesoAplicado = filtro[TensorMap4D(x - minX, y - minY, z, l, lenFilter, lenFilter, filtroz)];\n"
/*336*/		"				somaErro += pesoAplicado * gradNext[TensorMap(i, j, l, saidatx, saidaty)];\n"
/*337*/		"			}\n"
/*338*/		"		}\n"
/*339*/		"	}\n"
/*340*/		"	gradEntrada[k] = somaErro;\n"
/*341*/		"}\n"
/*342*/		"\n"
/*343*/		"\n"
/*344*/		"//dropout.h\n"
/*345*/		"long randoml(long seed, long id) {\n"
/*346*/		"	seed += id;\n"
/*347*/		"	return (seed * 0x5deece66dL + 0xbL) & ((1L << 48) - 1);\n"
/*348*/		"}\n"
/*349*/		"\n"
/*350*/		"double randomD(long seed, long id) {\n"
/*351*/		"	return (double) randoml(seed, id) / (double) ((1L << 48) - 1);\n"
/*352*/		"}\n"
/*353*/		"\n"
/*354*/		"kV\n"
/*355*/		"dropativa(Vector entrada, Vector saida, __global char *hitmap, long seed, double pativa, int k0) {\n"
/*356*/		"	int i = get_global_id(0) + k0;\n"
/*357*/		"	char teste = (char) (randomD(seed, i) <= pativa);\n"
/*358*/		"	hitmap[i] = teste;\n"
/*359*/		"	saida[i] = teste * entrada[i];\n"
/*360*/		"}\n"
/*361*/		"\n"
/*362*/		"\n"
/*363*/		"kV dropcalcgrad(Vector gradentrada, __global char *hitmap, Vector gradnext, int k0) {\n"
/*364*/		"	int i = get_global_id(0) + k0;\n"
/*365*/		"	gradentrada[i] = hitmap[i] * gradnext[i];\n"
/*366*/		"}\n"
/*367*/		"\n"
/*368*/		"//fullconnect.h\n"
/*369*/		"double sigmoid(double x) { return 1.0 / (1.0 + exp(-x)); }\n"
/*370*/		"\n"
/*371*/		"double difsigmoid(double x) {\n"
/*372*/		"	double tmp = sigmoid(x);\n"
/*373*/		"	return tmp * (1.0 - tmp);\n"
/*374*/		"}\n"
/*375*/		"\n"
/*376*/		"double tanghG(double x) { return tanh(x); }\n"
/*377*/		"\n"
/*378*/		"double diftanhG(double x) {\n"
/*379*/		"	double tmp = tanh(x);\n"
/*380*/		"	return (1.0 - tmp * tmp);\n"
/*381*/		"}\n"
/*382*/		"\n"
/*383*/		"double relu(double x) { return x > 0 ? x : 0.0; }\n"
/*384*/		"\n"
/*385*/		"double difrelu(double x) { return x > 0 ? 1.0 : 0.0; }\n"
/*386*/		"\n"
/*387*/		"double func(int id, double x) {\n"
/*388*/		"	switch (id) {\n"
/*389*/		"		case 0:\n"
/*390*/		"			return sigmoid(x);\n"
/*391*/		"		case 1:\n"
/*392*/		"			return difsigmoid(x);\n"
/*393*/		"		case 2:\n"
/*394*/		"			return tanghG(x);\n"
/*395*/		"		case 3:\n"
/*396*/		"			return diftanhG(x);\n"
/*397*/		"		case 4:\n"
/*398*/		"			return relu(x);\n"
/*399*/		"		case 5:\n"
/*400*/		"			return difrelu(x);\n"
/*401*/		"		default:\n"
/*402*/		"			return 0;\n"
/*403*/		"	}\n"
/*404*/		"}\n"
/*405*/		"\n"
/*406*/		"kV fullfeed(Vector entrada, Vector pesos, Vector z, Vector saida,\n"
/*407*/		"            int funcaoativacao, int inx, int iny, int inz, int pesosx, int pesosy, int k0) {\n"
/*408*/		"	int m = get_global_id(0) + k0;\n"
/*409*/		"	double valorEntrada = 0;\n"
/*410*/		"	int n;\n"
/*411*/		"	for (n = 0; n < pesosy; n++) {\n"
/*412*/		"		valorEntrada += entrada[n] * pesos[TensorMap(m, n, 0, pesosx, pesosy)];\n"
/*413*/		"	}\n"
/*414*/		"	z[m] = valorEntrada;\n"
/*415*/		"	saida[m] = func(funcaoativacao, valorEntrada);\n"
/*416*/		"}\n"
/*417*/		"\n"
/*418*/		"kV\n"
/*419*/		"fullfixweight(Vector a,\n"
/*420*/		"              Vector pesos,\n"
/*421*/		"              Vector dz,\n"
/*422*/		"              Vector dz_old,\n"
/*423*/		"              double hitlearn,\n"
/*424*/		"              double decaimentoDePeso,\n"
/*425*/		"              double momento,\n"
/*426*/		"              int inx,\n"
/*427*/		"              int iny,\n"
/*428*/		"              int inz,\n"
/*429*/		"              int pesosx,\n"
/*430*/		"              int pesosy,\n"
/*431*/		"              int k0) {\n"
/*432*/		"	int n = get_global_id(0) + k0;\n"
/*433*/		"	int m;\n"
/*434*/		"	double w;\n"
/*435*/		"	double tmp = dz[n] + dz_old[n] * momento;\n"
/*436*/		"	dz_old[n] = tmp;\n"
/*437*/		"	int k;\n"
/*438*/		"	for (m = inx * iny * inz - 1; m >= 0; m--) {\n"
/*439*/		"		k = TensorMap(n, m, 0, pesosx, pesosy);\n"
/*440*/		"		w = pesos[k];\n"
/*441*/		"		w -= hitlearn * (tmp * a[m] + w * decaimentoDePeso);\n"
/*442*/		"		pesos[k] = w;\n"
/*443*/		"	}\n"
/*444*/		"}\n"
/*445*/		"\n"
/*446*/		"kV fullcalcgrads1(Vector dz, Vector ds, Vector z, int dfa, int k0) {\n"
/*447*/		"	int m = get_global_id(0) + k0;\n"
/*448*/		"	dz[m] = ds[m] * func(dfa, z[m]);\n"
/*449*/		"}\n"
/*450*/		"\n"
/*451*/		"kV fullcalcgrads2(Vector dz, Vector da, Vector pesos, int pesosx, int pesosy,\n"
/*452*/		"                  int k0) {\n"
/*453*/		"	int m = get_global_id(0) + k0;\n"
/*454*/		"	double soma = 0;\n"
/*455*/		"	for (int n = 0; n < pesosx; ++n) {\n"
/*456*/		"		soma += dz[n] * pesos[TensorMap(n, m, 0, pesosx, pesosy)];\n"
/*457*/		"	}\n"
/*458*/		"	da[m] = soma;\n"
/*459*/		"}\n"
/*460*/		"\n"
/*461*/		"//padding.h\n"
/*462*/		"kV paddingfeed(Vector in,Vector out,\n"
/*463*/		"			   int txi,int tyi,\n"
/*464*/		"			   int txo,int tyo,\n"
/*465*/		"			   int t, int l ,\n"
/*466*/		"			   int k0){\n"
/*467*/		"	int k = get_global_id(0) + k0;\n"
/*468*/		"	int x, y, z;\n"
/*469*/		"	TensorRemap(k, x, y, z, txi, tyi)\n"
/*470*/		"	int s = TensorMap(x+t,y+l,z,txo,tyo);\n"
/*471*/		"	out[s] = in[k];\n"
/*472*/		"}\n"
/*473*/		"kV paddingBack(Vector gradNext,Vector gradin,\n"
/*474*/		"			   int txi,int tyi,\n"
/*475*/		"			   int txo,int tyo,\n"
/*476*/		"			   int t, int l , int k0){\n"
/*477*/		"	int k = get_global_id(0) + k0;\n"
/*478*/		"	int x, y, z;\n"
/*479*/		"	TensorRemap(k, x, y, z, txi, tyi)\n"
/*480*/		"	int s = TensorMap(x+t,y+l,z,txo,tyo);\n"
/*481*/		"	gradin[k] = gradNext[s];\n"
/*482*/		"}\n"
/*483*/		"//pool.h\n"
/*484*/		"kV poolativa(Vector entrada, Vector saida, int lenFilter,\n"
/*485*/		"             int passo, int saidatx, int saidaty, int entradatx, int entradaty, int k0) {\n"
/*486*/		"	int k = get_global_id(0) + k0;\n"
/*487*/		"	int x, y, z;\n"
/*488*/		"	TensorRemap(k, x, y, z, saidatx, saidaty)\n"
/*489*/		"\n"
/*490*/		"	Ponto3d mapeado = {x * passo, y * passo, 0};\n"
/*491*/		"	double mval, v;\n"
/*492*/		"	mval = -DBL_MAX;\n"
/*493*/		"	for (int i = 0; i < lenFilter; ++i) {\n"
/*494*/		"		for (int j = 0; j < lenFilter; ++j) {\n"
/*495*/		"			v = entrada[TensorMap(mapeado.x + i, mapeado.y + j, z, entradatx, entradaty)];\n"
/*496*/		"			if (v > mval)\n"
/*497*/		"				mval = v;\n"
/*498*/		"		}\n"
/*499*/		"	}\n"
/*500*/		"	saida[k] = mval;\n"
/*501*/		"}\n"
/*502*/		"\n"
/*503*/		"\n"
/*504*/		"kV\n"
/*505*/		"poolCalcGrads(Vector entrada, Vector gradEntrada, Vector gradNext, Vector saida,\n"
/*506*/		"              int lenFilter, int passo, int entradatx, int entradaty, int entradatz, int saidatx, int saidaty, int k0) {\n"
/*507*/		"	int k = get_global_id(0) + k0;\n"
/*508*/		"	int x, y;\n"
/*509*/		"	TensorRemap2D(k, x, y, entradaty)\n"
/*510*/		"	double somaErro = 0, testeMax;\n"
/*511*/		"	Range range;\n"
/*512*/		"	range = mapeia_entrada_saida(x, y, passo, lenFilter, saidatx, saidaty, 1);\n"
/*513*/		"	for (int z = 0; z < entradatz; ++z) {\n"
/*514*/		"		somaErro = 0;\n"
/*515*/		"		for (int i = range.min.x; i <= range.max.x; i++) {\n"
/*516*/		"			for (int j = range.min.y; j <= range.max.y; j++) {\n"
/*517*/		"				testeMax = (entrada[TensorMap(x, y, z, entradatx, entradaty)] ==\n"
/*518*/		"				            saida[TensorMap(i, j, z, saidatx, saidaty)]);\n"
/*519*/		"				somaErro += testeMax * gradNext[TensorMap(i, j, z, saidatx, saidaty)];\n"
/*520*/		"			}\n"
/*521*/		"		}\n"
/*522*/		"		gradEntrada[TensorMap(x, y, z, entradatx, entradaty)] = somaErro;\n"
/*523*/		"	}\n"
/*524*/		"}\n"
/*525*/		"\n"
/*526*/		"\n"
/*527*/		"//relu.h\n"
/*528*/		"kV reluativa(Vector entrada, Vector saida, int k0) {\n"
/*529*/		"	int k = get_global_id(0) + k0;\n"
/*530*/		"	double v = entrada[k];\n"
/*531*/		"	if (v < 0)\n"
/*532*/		"		v = 0;\n"
/*533*/		"	saida[k] = v;\n"
/*534*/		"}\n"
/*535*/		"\n"
/*536*/		"kV relucalcgrad(Vector gradentrada, Vector entrada, Vector gradnext, int k0) {\n"
/*537*/		"	int k = get_global_id(0) + k0;\n"
/*538*/		"	gradentrada[k] = entrada[k] <= 0.0 ? (0) : gradnext[k];\n"
/*539*/		"}\n"
/*540*/		"\n"
/*541*/		"//softmax.h\n"
/*542*/		"kV SoftMaxativa1(Vector entrada, Vector exponent, Vector soma, int entradatx,\n"
/*543*/		"                 int entradaty,\n"
/*544*/		"                 int k0) {\n"
/*545*/		"	int k = get_global_id(0) + k0;\n"
/*546*/		"	int x, y, z;\n"
/*547*/		"	TensorRemap(k, x, y, z, entradatx, entradaty)\n"
/*548*/		"	exponent[k] = exp(entrada[k]);\n"
/*549*/		"	soma[z] += exponent[k];\n"
/*550*/		"}\n"
/*551*/		"\n"
/*552*/		"kV SoftMaxativa2(Vector exponet, Vector soma, Vector saida,\n"
/*553*/		"                 int saidatx, int saidaty, int k0) {\n"
/*554*/		"	int k = get_global_id(0) + k0;\n"
/*555*/		"	int x, y, z;\n"
/*556*/		"	TensorRemap(k, x, y, z, saidatx, saidaty)\n"
/*557*/		"	saida[k] = exponet[TensorMap(x, y, z, saidatx, saidaty)] / soma[z];\n"
/*558*/		"}\n"
/*559*/		"\n"
/*560*/		"kV softMaxcalcgrad(Vector gradentrada, Vector entrada, Vector gradnext, int k0) {\n"
/*561*/		"	int k = get_global_id(0) + k0;\n"
/*562*/		"	double xi = entrada[k];\n"
/*563*/		"	gradentrada[k] = xi * (1.0 - xi) * gradnext[k];\n"
/*564*/		"}\n"
/*565*/		"\n"
/*566*/		"\n"
;
#endif // KERNELS_H
